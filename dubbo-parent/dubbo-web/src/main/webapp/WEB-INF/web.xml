<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
		 version="3.1">
		       <display-name>dubbo-web</display-name>
  
  
  
  <!-- 加载spring容器 -->
  <context-param>
    <!-- contextConfigLocation名字为固定，参数定义了要装入的 Spring 配置文件 -->
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring/spring-context.xml</param-value>
  </context-param>
  <!-- 定义Spring监听器，加载Spring  -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!-- springmvc前端控制器 -->
  <servlet>
    <servlet-name>springmvc</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!-- contextConfigLocation配置springmvc加载的配置文件（配置处理器映射器、适配器等等）
    如果不配置contextConfigLocation，默认加载的是/WEB-INF/servlet名称-serlvet.xml（springmvc-servlet.xml）
     -->
     <init-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring/spring-mvc.xml</param-value>
     </init-param>
     <!-- 表示servlet随服务启动； 标记容器是否在启动的时候就加载这个servlet。
                                当值为0或者大于0时，表示容器在应用启动时就加载这个servlet； -->
    <load-on-startup>1</load-on-startup>
  </servlet>
  <!-- springmvc对于请求url的解析 -->
  <servlet-mapping>
    <servlet-name>springmvc</servlet-name>
    <!-- 
    第一种：*.action，访问以.action结尾 由DispatcherServlet进行解析
    第二种：/，所以访问的地址都由DispatcherServlet进行解析，对于静态文件的解析需要配置不让DispatcherServlet进行解析
    使用此种方式可以实现 RESTful风格的url
    第三种：/*，这样配置不对，使用这种配置，最终要转发到一个jsp页面时，
    仍然会由DispatcherServlet解析jsp地址，不能根据jsp页面找到handler，会报错。
     -->
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <!-- spring框架提供的字符集过滤器 ,可以解决post发送的请求-->
    <!-- spring Web MVC框架提供了org.springframework.web.filter.CharacterEncodingFilter用于解决POST方式造成的中文乱码问题  -->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
           <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <!-- force强制，促使 -->
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 解决HTTP PUT请求Spring无法获取请求参数的问题 -->    
    <filter>    
        <filter-name>HiddenHttpMethodFilter</filter-name>    
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>    
    </filter>    
    <filter-mapping>    
        <filter-name>HiddenHttpMethodFilter</filter-name>    
        <url-pattern>/*</url-pattern>    
    </filter-mapping>

  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>

</web-app>